package soc

var fontset [80]uint8 = [80]uint8{
	0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
	0x20, 0x60, 0x20, 0x20, 0x70, // 1
	0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
	0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
	0x90, 0x90, 0xF0, 0x10, 0x10, // 4
	0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
	0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
	0xF0, 0x10, 0x20, 0x40, 0x40, // 7
	0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
	0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
	0xF0, 0x90, 0xF0, 0x90, 0x90, // A
	0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
	0xF0, 0x80, 0x80, 0x80, 0xF0, // C
	0xE0, 0x90, 0x90, 0x90, 0xE0, // D
	0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
	0xF0, 0x80, 0xF0, 0x80, 0x80, // F
}

type Cpu struct {
	IndexRegister  uint16
	ProgramCounter uint16
	Memory         [4096]uint8
	Stack          [16]uint16
	StackPointer   uint8
	DelayTimer     uint8
	Display        [64 * 32]uint8
	SoundTimer     uint8
	Keypad         [16]uint8
	Opcode         uint8
}

func NewCpu() *Cpu {
	cpu := &Cpu{
		ProgramCounter: 0x200,
		Opcode:         0,
		IndexRegister:  0,
		StackPointer:   0,
	}

	for i := 0; i < 80; i++ {
		cpu.Memory[i] = fontset[i]
	}

	return cpu
}

func (cpu *Cpu) Cycle() int {
	return 0
}
